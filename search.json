[{"title":"git的简单命令","url":"/2019/03/04/git/","content":"#### 创建新仓库\n\n创建新文件夹，打开，然后执行 \n\n    git init\n以创建新的 git 仓库。\n\n** 有远程仓库的也可以直接**\n```\ngit clone git@github.com:michaelliao/bootstrap.git\n```\n\n\n**列出远程仓库**\n```\ngit remote -v\n```\n**查看远程仓库信息`git remote show [remote-name]`**\n```\ngit remote show origin\n```\n\n**要新建并切换到该分支，运行 `git checkout` 并加上 `-b` 参数：**\n```\ngit checkout -b feature_x//创建并切换到feature_x分支\n```\n这相当于执行下面这两条命令：\n```\ngit branch feature_x//创建\ngit checkout feature_x//切换\n```\n**再把新建的分支删掉：**\n```\ngit branch -d feature_x\n```\n\n**除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：**\n```\ngit push origin master//推送到master分支\n```\n\n\n>要更新你的本地仓库至最新改动，执行:\n>`git pull`\n\n>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。\n要合并其他分支到你的当前分支（例如 master），执行：\n>`git merge <branch>`\n\n>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：\n>`git add <filename>`\n\n>在合并改动之前，也可以使用如下命令查看：\n>`git diff <source_branch> <target_branch>`\n\n#### git stash（git储藏）\n如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用`git stash`就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用`git stash apply`将以前一半的工作应用回来。\n***重新应用缓存的stash***\n可以通过`git stash pop`命令恢复之前缓存的工作目录,这个指令将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。\n你也可以使用`git stash apply`命令，将缓存堆栈中的stash多次应用到工作目录中，但并不删除stash拷贝。\n可以使用`git stash list`命令查看现有stash,可以使用`git stash drop`命令，后面可以跟着stash名字。下面是一个示例：\n\n>$ git stash list\n>\n>stash@{0}: WIP on master: 049d078 added the index file\n>stash@{1}: WIP on master: c264051 Revert \"added file_size\"\n>stash@{2}: WIP on master: 21d80a5 added number to log\n>$ git stash drop stash@{0}\n>Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)\n\n#### 版本回退\n```\ngit reset --hard 版本号\n```"},{"title":"Charles","url":"/2019/03/04/Chalres/","content":"破解版包含软件 链接: https://pan.baidu.com/s/1dG9m40p 密码: 33av\n解压后将charles.jar文件替换即可\n\n*   启动Charles软件，在菜单中找到**Help -> SSL Proxying -> Install Charles Root Certificate**进行证书安装。\n\n*   安装完在Mac的”钥匙串访问“中可看到Charles证书。但是此证书是不被信任的，要双击Charles证书进行信任操作。\n\n## Proxy设置\n\n在 Charles 的工具栏上点击设置按钮，选择 SSL Proxy Settings，选中 Enable SSL Proxying。（别急，选完先别关掉）\n\nSSL 选项卡的 Locations 里填写要抓包的域名和端口，点击 Add 按钮，在弹出的表单中 Host 填写域名。比如填*，Port 填 443\n\n\n## 手机端设置\n\n1.  与Mac处于同一个wifi局域网中，并设置Http代理为`host = Mac的IP, port = 8888`。可在终端输入`ifconifg en0`来获取Mac的IP。\n\n\n2.  给手机安装Charles证书有以下两种方式：\n\n    1.  远程安装(推荐iPhone)：Charles菜单 -> **Help -> SSL Proxying -> Install Charles Root Certificate on a Mobile Device**。\n\n在手机浏览器中输入：`chls.pro/ssl`会提示安装证书\n\n下载 安装完后 后还需要在 `通用->关于`里面信任一下证书，不然会导致网络无法访问的问题\n\n# Charles的注意事项\n\n## 中文乱码\nSSL Proxying 没有配置好\n\n"},{"title":"Hexo","url":"/2019/03/04/Hexo/","content":"#### Github创建远程库\n在GitHub上创建一个tony1015.github.io的远程库\n\n\n#### 下载安装hexo\n```\n$ npm install -g hexo-cli\n```\n**安装好hexo以后，在终端输入：**\n```\n$ hexo\n```\n得到如下信息\n```\n➜  tony1015.github.io git:(develop) ✗ hexo\nUsage: hexo <command>\nCommands:\n  clean     Removed generated files and cache.\n  config    Get or set configurations.\n  deploy    Deploy your website.\n  generate  Generate static files.\n  ----------------------部分省略\nor you can check the docs: http://hexo.io/docs/\n```\n**初始化博客**\n```\n// 建立一个博客文件夹，并初始化博客，tony1015.github.io为文件夹的名称，可以随便起名字\n$ hexo init tony1015.github.io\n// 进入博客文件夹，tony1015.github.io为文件夹的名称\n$ cd tony1015.github.io\n// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包\n$ npm install\n```\n**安装主题**\n```\n$ git clone https://github.com/aircloud/hexo-theme-aircloud themes/aircloud\n```\n**启用主题**\n与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件_config.yml， 找到 theme 字段，并将其值更改为 aircloud。\n```\n启用主题\ntheme: next\n```\nno\n**验证主题**\n首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是hexo s –debug。\n```\n$ hexo s --debug\n```\n在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：\n```\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运。不出所料应该已经能看到样式了\n\n#### hexo-admin配置\nhttps://github.com/jaredly/hexo-admin\n```\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/\n```\n密码设置，需要在根母目录下的/_config.yml文件里面加入如下代码\n```\nadmin:\n  username: guoyoujin\n  password_hash: $2a$10$8f0CO288aEgpb0BQk0mAEOIDwPS.s6nl703xL6PLTVzM.758x8xsi\n  secret: a secret something\n```\n注意上面的password_hash需要使用nodejs语语法生成\n```\n$ npm install bcrypt-nodejs --save\n$ node\n> const bcrypt = require('bcrypt-nodejs')\n> bcrypt.hashSync('your password secret here!')\n//=> '$2a$10$8f0CO288aEgpb0BQk0mAEOIDwPS.s6nl703xL6PLTVzM.758x8xsi'\n```\n把上面输出的值替换成password_hash的值即可\n#### 同步到Github\n安装 hexo-deployer-git。\n```\n$ npm install hexo-deployer-git --save\n```\n修改配置。\n```\ndeploy:\n  type: git\n  repo: <repository url> #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io\n  branch: [branch] #published\n  message: [message]\n```\n\n参数|描述\n--|--\nrepo|\t库（Repository）地址\nbranch|\t分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\nmessage|\t自定义提交信息(默认为 Site updated: （'YYYY-MM-DD HH:mm:ss'）)\n\n使用 Hexo 生成静态文件快速而且简单。\n```\n$ hexo generate\n```\n生成站点文件并推送至远程库。执行hexo clean && hexo deploy命令。前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。（如果您的Hexo是局部安装，则需要执行./node_modules/.bin/hexo clean && ./node_modules/.bin/hexo deploy。）\n发布\n运行一下命令将Hexo上传到Github"},{"title":"Hello World","url":"/2019/03/04/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]